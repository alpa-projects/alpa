From 556562553f61b757a8b3b2b5a6721183f1637bc7 Mon Sep 17 00:00:00 2001
From: Lianmin Zheng <lianminzheng@gmail.com>
Date: Wed, 18 May 2022 00:20:47 +0000
Subject: [PATCH] Customize build scripts for alpa

---
 .bazelrc                           |  8 ++++----
 WORKSPACE                          | 20 ++++++++++++--------
 build/build.py                     | 19 ++++++++++++++++++-
 build/build_wheel.py               | 17 ++++++++++++++++-
 build/load_tensorflow_from_env.bzl |  9 +++++++++
 5 files changed, 59 insertions(+), 14 deletions(-)
 create mode 100644 build/load_tensorflow_from_env.bzl

diff --git a/.bazelrc b/.bazelrc
index 548b993b8..8a02d5b61 100644
--- a/.bazelrc
+++ b/.bazelrc
@@ -165,9 +165,9 @@ build:rbe_linux_cuda11.1_nvcc_base --config=rbe_linux_cuda_base
 build:rbe_linux_cuda11.1_nvcc_base --action_env=TF_CUDA_VERSION=11
 build:rbe_linux_cuda11.1_nvcc_base --action_env=TF_CUDNN_VERSION=8
 build:rbe_linux_cuda11.1_nvcc_base --action_env=CUDA_TOOLKIT_PATH="/usr/local/cuda-11.1"
-build:rbe_linux_cuda11.1_nvcc_base --action_env=LD_LIBRARY_PATH="/usr/local/cuda:/usr/local/cuda/lib64:/usr/local/cuda/extras/CUPTI/lib64:/usr/local/tensorrt/lib"
+build:rbe_linux_cuda11.1_nvcc_base --action_env=LD_LIBRARY_PATH="/usr/local/cuda-11.1:/usr/local/cuda-11.1/lib64:/usr/local/cuda-11.1/extras/CUPTI/lib64:/usr/local/tensorrt/lib"
 build:rbe_linux_cuda11.1_nvcc_base --action_env=GCC_HOST_COMPILER_PATH="/dt7/usr/bin/gcc"
-test:rbe_linux_cuda11.1_nvcc_base --test_env=LD_LIBRARY_PATH="/usr/local/cuda/lib64:/usr/local/cuda/extras/CUPTI/lib64:/usr/local/cuda-11.1/lib64"
+test:rbe_linux_cuda11.1_nvcc_base --test_env=LD_LIBRARY_PATH="/usr/local/cuda-11.1/lib64:/usr/local/cuda-11.1/extras/CUPTI/lib64:/usr/local/cuda-11.1/lib64"
 build:rbe_linux_cuda11.1_nvcc_base --host_crosstool_top="@ubuntu18.04-gcc7_manylinux2010-cuda11.1-cudnn8-tensorrt7.2_config_cuda//crosstool:toolchain"
 build:rbe_linux_cuda11.1_nvcc_base --crosstool_top="@ubuntu18.04-gcc7_manylinux2010-cuda11.1-cudnn8-tensorrt7.2_config_cuda//crosstool:toolchain"
 build:rbe_linux_cuda11.1_nvcc_base --extra_toolchains="@ubuntu18.04-gcc7_manylinux2010-cuda11.1-cudnn8-tensorrt7.2_config_cuda//crosstool:toolchain-linux-x86_64"
@@ -190,7 +190,7 @@ build:rbe_linux_cuda11.4_nvcc_base --config=rbe_linux_cuda_base
 build:rbe_linux_cuda11.4_nvcc_base --action_env=TF_CUDA_VERSION=11
 build:rbe_linux_cuda11.4_nvcc_base --action_env=TF_CUDNN_VERSION=8
 build:rbe_linux_cuda11.4_nvcc_base --action_env=CUDA_TOOLKIT_PATH="/usr/local/cuda-11.4"
-build:rbe_linux_cuda11.4_nvcc_base --action_env=LD_LIBRARY_PATH="/usr/local/cuda:/usr/local/cuda/lib64:/usr/local/cuda/extras/CUPTI/lib64:/usr/local/tensorrt/lib"
+build:rbe_linux_cuda11.4_nvcc_base --action_env=LD_LIBRARY_PATH="/usr/local/cuda-11.4:/usr/local/cuda-11.4/lib64:/usr/local/cuda-11.4/extras/CUPTI/lib64:/usr/local/tensorrt/lib"
 build:rbe_linux_cuda11.4_nvcc_base --action_env=GCC_HOST_COMPILER_PATH="/dt7/usr/bin/gcc"
 build:rbe_linux_cuda11.4_nvcc_base --host_crosstool_top="@ubuntu18.04-gcc7_manylinux2010-cuda11.4-cudnn8.2-tensorrt7.2_config_cuda//crosstool:toolchain"
 build:rbe_linux_cuda11.4_nvcc_base --crosstool_top="@ubuntu18.04-gcc7_manylinux2010-cuda11.4-cudnn8.2-tensorrt7.2_config_cuda//crosstool:toolchain"
@@ -214,7 +214,7 @@ build:rbe_linux_cuda11.4_cudnn8.0.5_nvcc_base --config=rbe_linux_cuda_base
 build:rbe_linux_cuda11.4_cudnn8.0.5_nvcc_base  --action_env=TF_CUDA_VERSION=11
 build:rbe_linux_cuda11.4_cudnn8.0.5_nvcc_base  --action_env=TF_CUDNN_VERSION=8.0.5
 build:rbe_linux_cuda11.4_cudnn8.0.5_nvcc_base  --action_env=CUDA_TOOLKIT_PATH="/usr/local/cuda-11.4"
-build:rbe_linux_cuda11.4_cudnn8.0.5_nvcc_base  --action_env=LD_LIBRARY_PATH="/usr/local/cuda:/usr/local/cuda/lib64:/usr/local/cuda/extras/CUPTI/lib64:/usr/local/tensorrt/lib"
+build:rbe_linux_cuda11.4_cudnn8.0.5_nvcc_base  --action_env=LD_LIBRARY_PATH="/usr/local/cuda-11.4:/usr/local/cuda-11.4/lib64:/usr/local/cuda-11.4/extras/CUPTI/lib64:/usr/local/tensorrt/lib"
 build:rbe_linux_cuda11.4_cudnn8.0.5_nvcc_base  --action_env=GCC_HOST_COMPILER_PATH="/dt7/usr/bin/gcc"
 build:rbe_linux_cuda11.4_cudnn8.0.5_nvcc_base  --host_crosstool_top="@ubuntu18.04-gcc7_manylinux2010-cuda11.4-cudnn8.0.5-tensorrt7.2_config_cuda//crosstool:toolchain"
 build:rbe_linux_cuda11.4_cudnn8.0.5_nvcc_base  --crosstool_top="@ubuntu18.04-gcc7_manylinux2010-cuda11.4-cudnn8.0.5-tensorrt7.2_config_cuda//crosstool:toolchain"
diff --git a/WORKSPACE b/WORKSPACE
index 9e79ded6e..4d263ba8b 100644
--- a/WORKSPACE
+++ b/WORKSPACE
@@ -17,14 +17,14 @@ http_archive(
 # b) get the sha256 hash of the commit by running:
 #    curl -L https://github.com/tensorflow/tensorflow/archive/<git hash>.tar.gz | sha256sum
 #    and update the sha256 with the result.
-http_archive(
-    name = "org_tensorflow",
-    sha256 = "a491d6c2fac467956809d100fdeaeaada35103c724acebba1168f7cfd47f1209",
-    strip_prefix = "tensorflow-0d5668cbdc6b46d099bd3abd93374c09b2e8121f",
-    urls = [
-        "https://github.com/tensorflow/tensorflow/archive/0d5668cbdc6b46d099bd3abd93374c09b2e8121f.tar.gz",
-    ],
-)
+#http_archive(
+#    name = "org_tensorflow",
+#    sha256 = "a491d6c2fac467956809d100fdeaeaada35103c724acebba1168f7cfd47f1209",
+#    strip_prefix = "tensorflow-0d5668cbdc6b46d099bd3abd93374c09b2e8121f",
+#    urls = [
+#        "https://github.com/tensorflow/tensorflow/archive/0d5668cbdc6b46d099bd3abd93374c09b2e8121f.tar.gz",
+#    ],
+#)
 
 # For development, one can use a local TF repository instead.
 # local_repository(
@@ -32,6 +32,10 @@ http_archive(
 #    path = "tensorflow",
 # )
 
+# Load the path of tensorflow from environment variable TF_PATH
+load("//build:load_tensorflow_from_env.bzl", "load_tensorflow_from_env")
+load_tensorflow_from_env(name="org_tensorflow")
+
 load("//third_party/pocketfft:workspace.bzl", pocketfft = "repo")
 pocketfft()
 
diff --git a/build/build.py b/build/build.py
index 86125bd1d..f9ec20b61 100755
--- a/build/build.py
+++ b/build/build.py
@@ -217,7 +217,7 @@ def write_bazelrc(python_bin_path=None, remote_build=None,
                   cuda_toolkit_path=None, cudnn_install_path=None,
                   cuda_version=None, cudnn_version=None, rocm_toolkit_path=None,
                   cpu=None, cuda_compute_capabilities=None,
-                  rocm_amdgpu_targets=None):
+                  rocm_amdgpu_targets=None, tf_path=None):
   tf_cuda_paths = []
 
   with open("../.jax_configure.bazelrc", "w") as f:
@@ -262,6 +262,12 @@ def write_bazelrc(python_bin_path=None, remote_build=None,
       f.write(f"build --cpu={cpu}\n")
     else:
       f.write("build --distinct_host_configuration=false\n")
+    if tf_path:
+      f.write(f'build --action_env TF_PATH="{tf_path}"\n')
+      from cupy.cuda import nccl
+      nccl_version = str(nccl.get_version())
+      nccl_version = f"{nccl_version[0]}.{int(nccl_version[1:-2])}.{int(nccl_version[-2:])}"
+      f.write(f'build --action_env TF_NCCL_VERSION="{nccl_version}"\n')
 
 
 BANNER = r"""
@@ -406,6 +412,14 @@ def main():
       default=None,
       help="CPU platform to target. Default is the same as the host machine. "
            "Currently supported values are 'darwin_arm64' and 'darwin_x86_64'.")
+  parser.add_argument(
+      "--tf_path",
+      required=True,
+      help="The path to tensorflow repo")
+  parser.add_argument(
+      "--dev_install",
+      action="store_true",
+      help="Do not build wheel. Use dev install")
   args = parser.parse_args()
 
   if is_windows() and args.enable_cuda:
@@ -485,6 +499,7 @@ def main():
       cpu=args.target_cpu,
       cuda_compute_capabilities=args.cuda_compute_capabilities,
       rocm_amdgpu_targets=args.rocm_amdgpu_targets,
+      tf_path=args.tf_path
   )
 
   print("\nBuilding XLA and installing it in the jaxlib source tree...")
@@ -518,6 +533,8 @@ def main():
     [":build_wheel", "--",
     f"--output_path={output_path}",
     f"--cpu={wheel_cpu}"])
+  if args.dev_install:
+    command += ["--dev_install"]
   print(" ".join(command))
   shell(command)
   shell([bazel_path, "shutdown"])
diff --git a/build/build_wheel.py b/build/build_wheel.py
index 2c28874b8..b73cb0f53 100644
--- a/build/build_wheel.py
+++ b/build/build_wheel.py
@@ -45,6 +45,10 @@ parser.add_argument(
   default=None,
   required=True,
   help="Target CPU architecture. Required.")
+parser.add_argument(
+  "--dev_install",
+  action="store_true",
+  help="Do not build wheel. Use dev install")
 args = parser.parse_args()
 
 r = runfiles.Create()
@@ -302,6 +306,14 @@ def build_wheel(sources_path, output_path, cpu):
     shutil.copy(wheel, output_path)
 
 
+def dev_install(sources_path, output_path):
+  sys.stderr.write("Dev Install:\n")
+  sys.stderr.write(f'Run "pip install -e ." once in {output_path}\n')
+  os.system(f"rm -rf {output_path}/*")
+  os.system(f"cp -r {sources_path}/* {output_path}")
+  return
+
+
 tmpdir = None
 sources_path = args.sources_path
 if sources_path is None:
@@ -311,7 +323,10 @@ if sources_path is None:
 try:
   os.makedirs(args.output_path, exist_ok=True)
   prepare_wheel(sources_path)
-  build_wheel(sources_path, args.output_path, args.cpu)
+  if args.dev_install:
+    dev_install(sources_path, args.output_path)
+  else:
+    build_wheel(sources_path, args.output_path, args.cpu)
 finally:
   if tmpdir:
     tmpdir.cleanup()
diff --git a/build/load_tensorflow_from_env.bzl b/build/load_tensorflow_from_env.bzl
new file mode 100644
index 000000000..20605fe9b
--- /dev/null
+++ b/build/load_tensorflow_from_env.bzl
@@ -0,0 +1,9 @@
+def _load_tensorflow_from_env_impl(ctx):
+    tf_path = ctx.os.environ['TF_PATH']
+    ctx.symlink(tf_path, "")
+
+load_tensorflow_from_env = repository_rule(
+    implementation = _load_tensorflow_from_env_impl,
+    local=True,
+    environ=["TF_PATH"],
+)
-- 
2.17.1

