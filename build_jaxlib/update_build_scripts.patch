diff --git a/build_jaxlib/build/build.py b/build_jaxlib/build/build.py
index d8e90202..5cbcc33d 100755
--- a/build_jaxlib/build/build.py
+++ b/build_jaxlib/build/build.py
@@ -283,6 +283,11 @@ def write_bazelrc(*, python_bin_path, remote_build,
       f.write("build --config=cuda\n")
       if not enable_nccl:
         f.write("build --config=nonccl\n")
+      else:
+        from cupy.cuda import nccl
+        nccl_version = str(nccl.get_version())
+        nccl_version = f"{nccl_version[0]}.{int(nccl_version[1:-2])}.{int(nccl_version[-2:])}"
+        f.write(f'build --action_env TF_NCCL_VERSION="{nccl_version}"\n')
     if enable_tpu:
       f.write("build --config=tpu\n")
     if enable_remote_tpu:
@@ -292,6 +297,7 @@ def write_bazelrc(*, python_bin_path, remote_build,
       if not enable_nccl:
         f.write("build --config=nonccl\n")
 
+
 BANNER = r"""
      _   _  __  __
     | | / \ \ \/ /
@@ -443,6 +449,10 @@ def main():
       "configure_only",
       default=False,
       help_str="If true, writes a .bazelrc file but does not build jaxlib.")
+  parser.add_argument(
+      "--dev_install",
+      action="store_true",
+      help="Do not build wheel. Use dev install")
   args = parser.parse_args()
 
   if is_windows() and args.enable_cuda:
@@ -546,6 +556,8 @@ def main():
     [":build_wheel", "--",
     f"--output_path={output_path}",
     f"--cpu={wheel_cpu}"])
+  if args.dev_install:
+    command += ["--dev_install"]
   print(" ".join(command))
   shell(command)
   shell([bazel_path, "shutdown"])
diff --git a/build_jaxlib/build/build_wheel.py b/build_jaxlib/build/build_wheel.py
index 31df6256..d118da2c 100644
--- a/build_jaxlib/build/build_wheel.py
+++ b/build_jaxlib/build/build_wheel.py
@@ -48,6 +48,10 @@ parser.add_argument(
   default=None,
   required=True,
   help="Target CPU architecture. Required.")
+parser.add_argument(
+  "--dev_install",
+  action="store_true",
+  help="Do not build wheel. Use dev install")
 args = parser.parse_args()
 
 r = runfiles.Create()
@@ -79,6 +83,12 @@ def copy_file(src_file, dst_dir, dst_filename=None, from_runfiles=True):
   else:
     shutil.copy(src_file, dst_file)
 
+def dev_install(sources_path, output_path):
+  sys.stderr.write("Dev Install:\n")
+  sys.stderr.write(f'Run "pip install -e ." once in {output_path}\n')
+  os.system(f"rm -rf {output_path}/*")
+  os.system(f"cp -r {sources_path}/* {output_path}")
+  return
 
 _XLA_EXTENSION_STUBS = [
     "__init__.pyi",
@@ -300,7 +310,10 @@ if sources_path is None:
 try:
   os.makedirs(args.output_path, exist_ok=True)
   prepare_wheel(sources_path)
-  build_wheel(sources_path, args.output_path, args.cpu)
+  if args.dev_install:
+    dev_install(sources_path, args.output_path)
+  else:
+    build_wheel(sources_path, args.output_path, args.cpu)
 finally:
   if tmpdir:
     tmpdir.cleanup()
