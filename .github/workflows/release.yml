name: Release Alpa and Jaxlib

on:
#  release:
#    types: [created]
  push:
    branches: [hao-cd]


env:
  TWINE_USERNAME: "__token__"
  TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}


jobs:

  clean-up:
    runs-on: [self-hosted]

    steps:
      - name: clean up images
        run: |
          docker image prune -f

  release-jaxlib:
    runs-on: [ self-hosted ]
    needs: [clean-up]
    strategy:
      matrix:
#        cuda: [11.0, 11.1, 11.2]
        cuda: [11.2]
        python: [3.7, 3.8, 3.9]

    steps:
      - uses: actions/checkout@v3

      - name: build image
        run: |
          docker build -t build-jaxlib-image-cuda${CUDA_VERSION} \
            -f docker/build_jaxlib.Dockerfile docker/ \
            --build-arg JAX_CUDA_VERSION=${CUDA_VERSION}
        env:
          CUDA_VERSION: ${{ matrix.cuda }}

      - name: Compile Jaxlib
        run: |
          mkdir -p /data/alpa-dist/jaxlib-alpa/cuda${CUDA_VERSION//.}
          docker run --gpus all --tmpfs /build:exec \
          --rm -v /data/alpa-dist/jaxlib-alpa:/dist build-jaxlib-image-cuda${CUDA_VERSION} \
          ${PYTHON_VERSION} cuda ${CUDA_VERSION} master
        env:
          CUDA_VERSION: ${{ matrix.cuda }}
          PYTHON_VERSION: ${{ matrix.python }}

      # change this to publishing to pypi
      - name: Publish to local
        run: |
          echo "Move the Jaxlib binary"
          mv dist/*.whl dist/cuda${CUDA_VERSION//.}/
        env:
          CUDA_VERSION: ${{ matrix.cuda }}

#  release-alpa:
#    runs-on: [self-hosted]
#
#    needs: release-jaxlib
#
#    steps:
#
#      - uses: actions/checkout@v3
#
#      - name: Set up Python 3.8
#        uses: actions/setup-python@v2
#        with:
#          python-version: '3.8'
#
#      - name: Install dependencies
#        run: |
#          python -m pip install --upgrade pip
#          pip install setuptools wheel twine six auditwheel pybind11 cmake
#
#      - name: Build and publish
#        run: |
#          export VERSION=$(./GENVER --pep440)
#          python setup.py sdist bdist_wheel
#          ls -ltr dist/
#          twine upload --repository testpypi dist/*
#
#      - name: Bump VERSION and commit
#        run: |
#          git config --local user.email "action@github.com"
#          git config --local user.name "GitHub Action"
#          git checkout -b actions/version-bump
#          cat VERSION | awk -F. -v OFS=. 'NF==1{print ++$NF}; NF>1{$NF=sprintf("%0*d", length($NF), ($NF+1)); print}' > VERSION.tmp && mv VERSION.tmp VERSION
#          git add VERSION
#          git commit -m "Bump candidate version"
#
#      - name: Push branch
#        uses: ad-m/github-push-action@master
#        with:
#          github_token: ${{ secrets.PAT_TOKEN }}
#          branch: actions/version-bump
#          force: true
#
#      - name: Create version-bump PR
#        uses: repo-sync
